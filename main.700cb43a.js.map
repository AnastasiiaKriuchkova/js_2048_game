{"version":3,"sources":["scripts/main.js"],"names":["fieldRows","document","querySelectorAll","messageWin","querySelector","messageLose","button","messageStart","gameScore","GRID_SIZE","addEventListener","e","key","keys","grid","slideUp","slideLeft","slideDown","slideRight","classList","replace","textContent","add","startGame","Grid2048","field","score","addNumber","updateGrid","zeros","rowIndex","colIndex","push","randomZeroIndex","randomZeroCoord","Math","floor","random","length","digit","x","y","fieldRow","fieldCell","children","cellValue","className","remove","fieldCopy","gameOver","inputRow","row","slide","combine","arr","filter","item","missing","Array","fill","concat","i","a","b","newField","newRow","changed","oldRow","operate","flipField","rotateField"],"mappings":"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","file":"main.700cb43a.js","sourceRoot":"../src","sourcesContent":["'use strict';\n\nconst fieldRows = document.querySelectorAll('.field_row');\nconst messageWin = document.querySelector('.message_win');\nconst messageLose = document.querySelector('.message_lose');\nconst button = document.querySelector('.start');\nconst messageStart = document.querySelector('.message_start');\nconst gameScore = document.querySelector('.game_score');\n\nconst GRID_SIZE = 4;\n\ndocument.addEventListener('keydown', (e) => {\n  const key = e.key;\n  const keys = {\n    ArrowUp: 'ArrowUp',\n    ArrowLeft: 'ArrowLeft',\n    ArrowDown: 'ArrowDown',\n    ArrowRight: 'ArrowRight',\n  };\n\n  switch (key) {\n    case keys.ArrowUp:\n      grid.slideUp();\n      break;\n    case keys.ArrowLeft:\n      grid.slideLeft();\n      break;\n    case keys.ArrowDown:\n      grid.slideDown();\n      break;\n    case keys.ArrowRight:\n      grid.slideRight();\n      break;\n  }\n});\n\nbutton.addEventListener('click', () => {\n  button.classList.replace('start', 'restart');\n  button.textContent = 'Restart';\n  messageStart.classList.add('hidden');\n  messageWin.classList.add('hidden');\n  messageLose.classList.add('hidden');\n  grid.startGame();\n});\n\nclass Grid2048 {\n  startGame() {\n    this.field = [\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n      [0, 0, 0, 0],\n    ];\n    this.score = 0;\n    this.addNumber();\n    this.addNumber();\n    this.updateGrid();\n  }\n\n  addNumber() {\n    const zeros = [];\n\n    for (let rowIndex = 0; rowIndex < GRID_SIZE; rowIndex++) {\n      for (let colIndex = 0; colIndex < GRID_SIZE; colIndex++) {\n        if (this.field[rowIndex][colIndex] === 0) {\n          zeros.push([rowIndex, colIndex]);\n        }\n      }\n    }\n\n    const randomZeroIndex = Math.floor(Math.random() * zeros.length);\n    const randomZeroCoord = zeros[randomZeroIndex];\n    const digit = Math.random() < 0.9 ? 2 : 4;\n    const x = randomZeroCoord[0];\n    const y = randomZeroCoord[1];\n\n    this.field[x][y] = digit;\n  }\n\n  updateGrid() {\n    for (let rowIndex = 0; rowIndex < GRID_SIZE; rowIndex++) {\n      for (let colIndex = 0; colIndex < GRID_SIZE; colIndex++) {\n        const fieldRow = fieldRows[rowIndex];\n        const fieldCell = fieldRow.children[colIndex];\n        const cellValue = this.field[rowIndex][colIndex];\n\n        if (cellValue === 0) {\n          fieldCell.className = 'field_cell';\n          fieldCell.textContent = '';\n        } else {\n          fieldCell.className = `field_cell field_cell--${cellValue}`;\n          fieldCell.textContent = cellValue;\n        }\n      }\n    }\n  }\n\n  messageWin() {\n    for (let rowIndex = 0; rowIndex < GRID_SIZE; rowIndex++) {\n      for (let colIndex = 0; colIndex < GRID_SIZE; colIndex++) {\n        if (this.field[rowIndex][colIndex] === 2048) {\n          messageWin.classList.remove('hidden');\n        }\n      }\n    }\n  }\n\n  gameOver() {\n    const fieldCopy = [...this.field];\n\n    for (let rowIndex = 0; rowIndex < GRID_SIZE; rowIndex++) {\n      for (let colIndex = 0; colIndex < GRID_SIZE; colIndex++) {\n        if (fieldCopy[rowIndex][colIndex] === 0) {\n          return false;\n        }\n\n        if (rowIndex !== GRID_SIZE - 1\n          && fieldCopy[rowIndex][colIndex] === fieldCopy[rowIndex + 1][colIndex]\n        ) {\n          return false;\n        }\n\n        if (colIndex !== GRID_SIZE - 1\n          && fieldCopy[rowIndex][colIndex] === fieldCopy[rowIndex][colIndex + 1]\n        ) {\n          return false;\n        }\n      }\n    }\n\n    return true;\n  }\n\n  messageLose() {\n    if (this.gameOver()) {\n      messageLose.classList.remove('hidden');\n    }\n  }\n\n  operate(inputRow) {\n    let row = [...inputRow];\n\n    row = this.slide(row);\n    row = this.combine(row);\n    row = this.slide(row);\n\n    return row;\n  }\n\n  slide(row) {\n    let arr = row.filter((item) => item);\n    const missing = GRID_SIZE - arr.length;\n    const zeros = Array(missing).fill(0);\n\n    arr = arr.concat(zeros);\n\n    return arr;\n  }\n\n  combine(row) {\n    for (let i = 0; i <= GRID_SIZE - 1; i++) {\n      const a = row[i];\n      const b = row[i + 1];\n\n      if (a === b) {\n        row[i] = a + b;\n        row[i + 1] = 0;\n        this.score += row[i];\n      }\n    }\n    gameScore.textContent = this.score;\n\n    return row;\n  }\n\n  flipField() {\n    const newField = [];\n\n    for (let rowIndex = 0; rowIndex < GRID_SIZE; rowIndex++) {\n      const newRow = [];\n\n      for (let colIndex = GRID_SIZE - 1; colIndex >= 0; colIndex--) {\n        newRow.push(this.field[rowIndex][colIndex]);\n      }\n      newField.push(newRow);\n    }\n    this.field = newField;\n  }\n\n  rotateField() {\n    const newField = [];\n\n    for (let rowIndex = 0; rowIndex < GRID_SIZE; rowIndex++) {\n      const newRow = [];\n\n      for (let colIndex = 0; colIndex < GRID_SIZE; colIndex++) {\n        newRow.push(this.field[GRID_SIZE - 1 - colIndex][rowIndex]);\n      }\n\n      newField.push(newRow);\n    }\n\n    this.field = newField;\n  }\n\n  slideLeft() {\n    let changed = false;\n\n    for (let rowIndex = 0; rowIndex < GRID_SIZE; rowIndex++) {\n      const oldRow = [...this.field[rowIndex]];\n      const newRow = this.operate(this.field[rowIndex]);\n\n      for (let colIndex = 0; colIndex < GRID_SIZE; colIndex++) {\n        if (oldRow[colIndex] !== newRow[colIndex]) {\n          changed = true;\n          break;\n        }\n      }\n\n      this.field[rowIndex] = newRow;\n    }\n\n    if (changed) {\n      this.addNumber();\n      this.updateGrid();\n      this.messageWin();\n      this.messageLose();\n    }\n  }\n\n  slideRight() {\n    this.flipField();\n    this.slideLeft();\n    this.flipField();\n    this.updateGrid();\n  }\n\n  slideDown() {\n    this.rotateField();\n    this.slideLeft();\n    this.rotateField();\n    this.rotateField();\n    this.rotateField();\n    this.updateGrid();\n  }\n\n  slideUp() {\n    this.rotateField();\n    this.rotateField();\n    this.rotateField();\n    this.slideLeft();\n    this.rotateField();\n    this.updateGrid();\n  }\n}\n\nconst grid = new Grid2048();\n"]}